Index: crypto.ipynb
===================================================================
diff --git a/crypto.ipynb b/crypto.ipynb
deleted file mode 100644
--- a/crypto.ipynb	
+++ /dev/null	
@@ -1,874 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 176,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Requirement already satisfied: yfinance in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (0.1.74)\n",
-      "Requirement already satisfied: pandas>=0.24.0 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from yfinance) (1.4.1)\n",
-      "Requirement already satisfied: requests>=2.26 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from yfinance) (2.26.0)\n",
-      "Requirement already satisfied: numpy>=1.15 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from yfinance) (1.23.1)\n",
-      "Requirement already satisfied: lxml>=4.5.1 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from yfinance) (4.8.0)\n",
-      "Requirement already satisfied: multitasking>=0.0.7 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from yfinance) (0.0.11)\n",
-      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas>=0.24.0->yfinance) (2021.3)\n",
-      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas>=0.24.0->yfinance) (2.8.2)\n",
-      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from requests>=2.26->yfinance) (2021.10.8)\n",
-      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from requests>=2.26->yfinance) (3.3)\n",
-      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from requests>=2.26->yfinance) (1.26.9)\n",
-      "Requirement already satisfied: charset-normalizer~=2.0.0 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from requests>=2.26->yfinance) (2.0.12)\n",
-      "Requirement already satisfied: six>=1.5 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from python-dateutil>=2.8.1->pandas>=0.24.0->yfinance) (1.16.0)\n",
-      "\n",
-      "[notice] A new release of pip available: 22.1.2 -> 22.2.1\n",
-      "[notice] To update, run: python.exe -m pip install --upgrade pip\n",
-      "Requirement already satisfied: finta in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (1.3)\n",
-      "Requirement already satisfied: pandas in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from finta) (1.4.1)\n",
-      "Requirement already satisfied: numpy in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from finta) (1.23.1)\n",
-      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas->finta) (2021.3)\n",
-      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas->finta) (2.8.2)\n",
-      "Requirement already satisfied: six>=1.5 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from python-dateutil>=2.8.1->pandas->finta) (1.16.0)\n",
-      "\n",
-      "[notice] A new release of pip available: 22.1.2 -> 22.2.1\n",
-      "[notice] To update, run: python.exe -m pip install --upgrade pip\n",
-      "Requirement already satisfied: mplfinance in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (0.12.9b1)\n",
-      "Requirement already satisfied: pandas in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from mplfinance) (1.4.1)\n",
-      "Requirement already satisfied: matplotlib in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from mplfinance) (3.5.1)\n",
-      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from matplotlib->mplfinance) (1.3.2)\n",
-      "Requirement already satisfied: numpy>=1.17 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from matplotlib->mplfinance) (1.23.1)\n",
-      "Requirement already satisfied: packaging>=20.0 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from matplotlib->mplfinance) (21.3)\n",
-      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from matplotlib->mplfinance) (4.29.1)\n",
-      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from matplotlib->mplfinance) (2.8.2)\n",
-      "Requirement already satisfied: cycler>=0.10 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from matplotlib->mplfinance) (0.11.0)\n",
-      "Requirement already satisfied: pillow>=6.2.0 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from matplotlib->mplfinance) (9.0.1)\n",
-      "Requirement already satisfied: pyparsing>=2.2.1 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from matplotlib->mplfinance) (3.0.7)\n",
-      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas->mplfinance) (2021.3)\n",
-      "Requirement already satisfied: six>=1.5 in c:\\users\\aruni\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from python-dateutil>=2.7->matplotlib->mplfinance) (1.16.0)\n",
-      "\n",
-      "[notice] A new release of pip available: 22.1.2 -> 22.2.1\n",
-      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
-     ]
-    }
-   ],
-   "source": [
-    "!pip install yfinance\n",
-    "!pip install finta\n",
-    "!pip install mplfinance\n",
-    "import mplfinance as mpf\n",
-    "import yfinance as yf\n",
-    "import datetime\n",
-    "import pandas as pd\n",
-    "import numpy as np\n",
-    "from finta import TA\n",
-    "import matplotlib.pyplot as plt\n",
-    "\n",
-    "\n",
-    "from sklearn import svm\n",
-    "from sklearn.ensemble import RandomForestClassifier\n",
-    "from sklearn.neighbors import KNeighborsClassifier\n",
-    "from sklearn.ensemble import AdaBoostClassifier\n",
-    "from sklearn.ensemble import GradientBoostingClassifier\n",
-    "from sklearn.ensemble import VotingClassifier\n",
-    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
-    "from sklearn.metrics import confusion_matrix, classification_report\n",
-    "from sklearn import metrics"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 177,
-   "outputs": [],
-   "source": [
-    "NUM_DAYS = 10000     # The number of days of historical data to retrieve\n",
-    "INTERVAL = '1d'     # Sample rate of historical data\n",
-    "symbol = 'ETH-GBP'\n",
-    "symbol1 = 'BTC-GBP'\n",
-    "symbol2= 'DOGE-GBP'\n",
-    "# Symbol of the desired stock\n",
-    "\n",
-    "# List of symbols for technical indicators\n",
-    "INDICATORS = ['RSI', 'MACD', 'STOCH','ADL', 'ATR', 'MOM', 'MFI', 'ROC', 'OBV', 'CCI', 'EMV', 'VORTEX']"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 178,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "[*********************100%***********************]  1 of 1 completed\n",
-      "[*********************100%***********************]  1 of 1 completed\n",
-      "[*********************100%***********************]  1 of 1 completed\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": "<Figure size 958.333x575 with 4 Axes>",
-      "image/png": "\n"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "<Figure size 958.333x575 with 4 Axes>",
-      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAyQAAAIfCAYAAACBwBjeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAA9hAAAPYQGoP6dpAACCW0lEQVR4nO3deXhTZdrH8V+S7tCWCrTsVaAU2cEpDCDCgAyjIoygIIKovIiAIy6ALCoyKowODC7DMogiCiIoIiIg4IJUULGiMDAqFlQUxbZsbSldk/P+0TY2XSAtTU+afj/X1avNyZOTJ7l7knOfZ7MYhmEIAAAAAExgNbsCAAAAAGouEhIAAAAApiEhAQAAAGAaEhIAAAAApiEhAQAAAGAaEhIAAAAApiEhAQAAAGAaEhIAAAAApiEhAQAAAGAaEhIAqCCLxeL8mT17ttnVAQCgWiIhAeCWH3/80eUEvPDHarWqVq1aatmypW688Ua9/fbbpT6+T58+zsf06dPH4/VdsWJFqfW1WCwKCQlRy5Ytdfvtt+vzzz/3eF0AAEDZ/MyuAIDqzTAMnTt3TkeOHNGRI0f05ptvasaMGZo7d67ZVStTZmams76vvPKK5s2bp8mTJ5d7P/PmzXP+3aNHj8qsIgAANQYJCYAK+cMf/qDhw4fLMAz9+OOPevHFF5WdnS1J+uc//6nJkyerbt26Jtfyd8OHD9cf/vAH5ebmat++fVq3bp0cDocMw9CDDz6o/v37q0OHDhfcT15ennJzcxUcHKwpU6ZUQc0BAPBtdNkCUCFt27bVlClTNHXqVC1atEh33nmn8z673a7ExERJ0uzZs2WxWLRz507n/Tt37nTpQrVixQqXfe/atUujR49Wy5YtVatWLWeXsFtuuUV79+6tUH3/8pe/aMqUKZoxY4bWrl2radOmOe9zOBx68803nbcvvfRSZ91uv/12HThwQIMHD1bdunXl7++vPXv2SLrwGJLvv/9ekydPVqdOnRQeHq7AwEA1bdpU11xzjdauXVui/J49ezR69Gg1b95cwcHBqlWrljp06KBZs2bp1KlTFXrdAAB4O1pIAFwUwzD0008/6dNPP3XZ3rBhwwrt77777tOzzz5bYnthF6uuXbvqiiuuqNC+i+rZs6fL7ePHj5da7r///a+6d++ujIyMcu1/9erVGjt2rDIzM122Hzt2TMeOHVNgYKCGDx/u3P7YY49p9uzZMgzDpfyBAwd04MABvfzyy9q+fbtiY2PLVQ8AALwdCQmACnn55Zf18ssvl3rfyJEjFR0dLUn685//rNq1a2vJkiX6/vvvJUnNmzfXhAkTnOXj4uIkSc8884xLMhISEqLhw4fr0ksv1U8//aR333230uq/e/dul9tlJVBfffWVbDabRo4cqdjYWB0+fFi1atU6776/+OIL3XbbbcrLy5OU35Jy/fXXq3Pnzjp16pTi4+Ndyq9bt06PPvqo83bPnj3Vv39/ZWRkaOXKlfrtt9/0008/6YYbbtCBAwdks9kq8pIBAPBKJCQAKlXPnj21ZMkS5+0ePXqoR48e2rRpkzMhadq0aYnxFw6HQ08++aTzdlhYmPbu3auWLVs6t+Xk5Cg5OblC9dq6datOnDihvLw87du3T2+88YbzPqvVqiFDhpT52HXr1umvf/2r28/11FNPOZMRSVqzZo2GDRvmUubIkSPOv4u+7muvvVabNm2SxWKRJN1xxx1q06aNJOmbb77RO++8U666AADg7UhIAFRI4aB2SUpKStKrr76q48ePa/fu3erZs6d27NhRrkHthw4dUlJSkvP2mDFjXJIRSQoICFCTJk0qVN+1a9eWOm7DYrHoH//4hzp27Fjq49q1a1fuBKBoC0inTp1KJCOS1KJFC0nSuXPn9OWXXzq3b9myRVZr2cP7du3aRUICAPApJCQAKqRwUHuh8ePHKyYmRoZh6MCBA5o7d67+9a9/ub2/4oO2L7vsskqra3GBgYFq3LixevbsqQkTJqh79+5llm3dunW591/0tVzodZw+fbrEuJHzSUlJKXd9AADwZiQkACpFixYtVK9ePecJ844dO8r1+EsuucTl9g8//FBpdZOkl156Sbfffnu5H3eh8SKlueSSS5xdyy70OiIiImSxWJxJSd++fXXNNdeUWb6w+xYAAL6ChARApfj+++914sQJ5+3c3FyX+/39/Z1/nzt3rsTjY2NjFRkZ6TyRX758ue655x41b97cZZ9JSUkV7rZVVa666iqtW7dOkrRv3z69+eabGjp0qEuZH374QZdddplCQkLUuXNnZ7et3377TePHj1ft2rVdyufm5uqdd945b2sOAADVEQkJgAr53//+p/nz50uSkpOTtXr1apeuR1deeaVL+aJJxN69ezVp0iQ1a9ZMknT33XcrODhYM2bM0P333y9JSktLU4cOHXTzzTcrOjpav/76q7Zu3ap7771X9913n4df3cWZNm2a3nrrLdntdknSTTfdpMGDB6tTp05KTU3VJ598ogYNGmjDhg3O8oXjcb7++mu1bdtWN9xwgxo0aKC0tDT973//00cffaS0tDT98MMPioiIMOulAQBQ6UhIAFTIF198oS+++KLU+y699FI98sgjLttuuukm5wKIDodD//73v5333X777QoODta9996rH374Qc8995wkKSMjQy+++KJnXoAH/eEPf9DLL7+sO++8U5mZmTIMQxs2bHAmIJI0ePBg59/Dhg3TN998o7///e/OdV1KW4sFAABfxErtAC6an5+f6tatqx49euiJJ57QV199pUaNGrmUufbaa/XCCy+oY8eOCgwMLHU/FotFzz77rOLj4zVq1Cg1b95cQUFBCgoKUnR0tIYNG1ai5cVbjRw5UgcOHND999+vDh06qHbt2vL391eDBg3Uv39/3XzzzS7lH330UX3++ecaM2aMYmJiFBwcLD8/P9WvX19XXnmlpk+frk8//VSXXnqpOS8IAAAPsRjlmd4FAAAAACoRLSQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATENCAgAAAMA0JCQAAAAATOPnTiGHw+H822KxeKwyAAAAQGUyDMP5t9XKtXhv5FZCIknp6emerAcAAADgMaGhoWZXAWVwOyGRpKCgIJ9qIbHb7UpMTFRMTIxsNpvZ1UEB4uKdiIt3Ii7e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t95S586d9d1332n9+vXat2+fRo0apc8//7zS3yczlSshiYmJ8amrCXa7XYcPH1bLli1ptvUixMU7ERfvRFy8F7HxTsTFO3kyLoZhKCcnx+1B7T/++KMSExOdt48fP6558+YpPj5eW7dudQ5MLz7gPDIy0jng/Nprr9XPP/+sv/71r7JYLBo0aJCefPJJffzxx0pKSlJ4eLjat2+vo0eP6k9/+pPq1q2rqVOn6i9/+YsWL16spKQkdevWTTabTV9++aV69eql5s2ba9WqVfrpp5+0adOmSn2PzFauhMRms/lUQlLIZrPxoeSFiIt3Ii7eibh4L2LjnYiLd/JEXAp794SFhbl9HhsXF+eyKvq0adP01VdflVr2v//9ryS5tFoEBwerQYMGSkhIKPM5ateurWuuuUbPPPOMc9u3337rUsZqteqJJ57QjTfe6Nz2wgsvuPUaqhPfmcMXAAAAuEhRUVFq3bq1y7ZWrVrp2LFjzvslKSUlxaVMcnKyIiMjnWWK35+Xl6fTp087Hx8ZGVmiTOHtC5UpfB5fQUICAAAAFOjWrZtLly1JOnLkiJo0aSJJio6OVlRUlHbu3Om8Py0tTXv37lVcXJwkOQe279u3z1kmPj5eDodDV1xxhbPMJ598otzcXGeZHTt2KCYmRnXq1JEkde3a1eV5CssUPo+vICEBAAAACkycOFFffPGF/vWvf+n777/XG2+8oZdfflljx46VlD9Ifvz48Zo/f762bNmi//3vf5owYYIaNGig6667TpIUGxurfv366d5779XevXudA9uHDBmihg0bSpJuvPFGBQQE6J577tE333yj9evXa+nSpZo4caKzLnfddZc++OADLVy4UN99952efPJJ7du3T3feeWfVvzEeVK4xJAAAAIAv69Kli1auXKnHHntM8+bNU3R0tObOnathw4Y5y9x77706d+6c7r//fqWmpuqPf/yj1q1bp6CgIGeZZcuWaerUqSUGthcKDw/Xm2++qalTp7oMbL/99tudZbp166Zly5Zpzpw5evzxx50D231pDRJJshhuzONrGIbS0tIUHBzsU4Pa7Xa7Dh06pNjYWAa2eRHi4p2Ii3ciLt6L2Hgn4uKdPBkXwzCUmZlZrkHtqFq0kPgA6/iJ0qlTnnuCSy6R4z+LPbd/AAAA1FgkJL7g1ClZGjfy2O6NX3712L4BAABQszGo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W1f+/v4XvW+fS0is4ydKbgbAKpVvrALjDwAAqLbcTRQrvP/sDI/tG/AW/v7+atCgQaXu0+cSksIxCO4qz1gFxh8AAADAWz300ENul50zZ06lPe+xY8f05JNPauHChRV6vO8lJAAAAEAN9N///tetcqVN33sxTp8+rddee42EBAAAAKjJ3nnnHY/st7QZu4o6evToRe2fhAQAAABAmUaNGiWLxSLDMMosczGtLiQkAAAAgA/66quv9NZbb+nYsWPKzXWd1W/lypVu76dBgwaaP3++rr322lLvP3DggPr06VPhepKQAACAKlOe2TArpBJmxFy8cJci0rMr9FjrM3suXIhZO1EF3nzzTU2YMEF9+/bVjh079Kc//UlHjhxRcnKyBg4cWK59dezYUfv27SszIZF03taTCyEhQbU08s/1dCLIzemaizLqS588fcFizCUPAB5Sztkwy6syZsSMSM9WcNPoSqhN6Zi1E1VhwYIFmjNnju688041bdpUTz75pKKjo3X//fcrKiqqXPu65557dO7cuTLvb968+UWNXyEhQbV0Isiq4LAwj+2fueQBAEB19uOPP2rAgAGS8tcOycjIkMVi0YQJEzR48GDNmDHD7X316NHjvPfXqlVLPXv2rHBdSUi8mNvN2tkVa1YGAG+Sv4q25y4G1JiWz59/lvLs5XuMYcg67OYLl6OrEVBt1KlTR+np6ZKkhg0b6ptvvlHbtm2Vmpp63tYOM5CQeDN3m7V/+NHjVQEAT8tfRTvQc/uvKS2feXbpskvL9RB358ahqxHg/b7++mu1adNG3bt310cffaS2bdvqr3/9q2bMmKGPP/5YO3bsUO/evc2upgsSEgAAAMBHXHnllerSpYuuvfZaDR48WJI0efJk+fn56fPPP9egQYM0ZcoUk2vpioQEAFCtpGZmyFGh2VwMXcukFgB83KZNm7R69Wo988wzWrBgga6//nrdeuutuv/++82uWplISAAA1YrDMBQRUttj+68xXbs8OdZEqtLxJi4zL55nNsUse46C5blugYA36NGjh3r06KGnnnpKGzZs0OrVqzVw4EA1b95co0aN0ogRI8o9y5anVYuEpDwDHTc4chXs4frgdxWdq73MedoZoI9iqsOaBUC15MGxJlLVjjdxd+bFrHO5FywD+IpatWpp5MiRGjlypL7//nu9+uqreuGFFzR37lz1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RkF3n8WLF2vo0KEucbniiitkGIb27dsniQk6zMAxU71kZ2frzJkz+uabb/TKK6/o2muv1fr167V161atXLlSS5cu1ZIlS8yuJirAYhh0jizkcDhktVqdvws9+eSTWrp0qT755BM1bNjQxBrWTIZhlDmw8MUXX9SMGTO0a9cutWrVqoprhuLHSiGOmaqXm5srf39/5+3isRk9erR+/fVXvfXWWwoNDTWjijVWWceJJE2ePFnvvfee4uPjVadOnaqtWA13vrhIHDPe6vHHH9fnn3+u1NRUTZ48WYMHD3a577PPPtPatWtVq1YtJiWoRmp8C8nhw4f17bffKjEx0fnBVJiUFOZqAwcOVP369bVlyxZJXCmpKoVXC0v7QCmMzeDBg9WhQwetXLlSeXl5DD6sAr/88ot++ukn/fTTTyW+zDlmqt7bb7+te+65R4MHD9aSJUv0xRdfSCr9c+zMmTM6ePCgJGLiaQcPHtRPP/0kqfRZtArjctNNNykoKEhbt2512Q7Pef/99/X3v/9do0eP1ttvv63s7GyX+zlmvMfhw4f1zTff6H//+59z21VXXaWsrCwdPHhQmZmZkn6PWWhoqIKDg1W7dm2SkWqmRickK1eu1ODBg3XLLbeoW7duuvfee/XRRx9Jyv8CKfwHb9eunWJjY7V69WrnffCsdevWae7cuc4Pm+IKP2jq1aunK664Qtu2bZPdbucDyMNef/11jRo1SoMGDVKvXr2cx0ThsVL4/nPMVI21a9dq/PjxCgwM1GWXXabnn39ejz76qFauXCnp96REkoYOHarAwEAtWrTIeR884/XXX9dVV12lefPm6fjx46WWKTxW/vjHP6phw4Zavny5y3Z4xqpVqzRhwgT99NNPysrK0h133KE33nhDUsnPMY4Zc73yyisaNmyYBg8erBEjRmjEiBFKSkpS7969NWnSJDVp0kR///vftX37dlksFqWnp+vzzz9XkyZNzK46KqJqh6x4j8IB0WvWrDESExONLVu2GFdffbUxaNAgY82aNc5yOTk5hmEYxsGDB42oqCjnwDd4zubNm42IiAgjIiLCePjhh43s7OxSy9ntdsMwDOPUqVNGvXr1jOeff74qq1njrF271mjcuLHx6quvGh988IGxYMECIyIiwvjyyy9dyuXl5RmGwTHjaampqcYNN9zgnG3GMAzjyy+/NO677z6jW7duxvLly53bCwfqLly40Bg+fLjhcDiqvL41xRdffGH88Y9/NCZMmGA0bNjQuPvuu41ff/211LKFn2HvvPOOccMNNzhvwzN27NhhtG7d2li/fr1z27x584z27dsbZ86ccSlb+DnGMWOOnTt3Gk2bNjXWr19v7Nmzx3j33XeNrl27GnFxccbevXsNwzCMrVu3GsOGDTPq1atn9OjRw+jevbvRs2dP53kbMateamxCsnTpUuPPf/6zy7Z9+/YZt912m3Httdcamzdvdrnv+PHjxmOPPeb8kIJn/PLLL8bo0aONRx991Fi3bp0RGRlpTJ8+vcykxOFwGGlpacbSpUuJjQd98803Rp8+fYyVK1c6t507d87o16+fMxEs/uHPMeNZZ8+eNTp37mzMmzfPZXtiYqLxwAMPGP369TPee+89l/uOHz/uPOnly7ry5eXlGZs2bTLuueceIz093fjkk0+M+vXrnzcpMQzDOHPmjDMeJCWece7cOWPatGnG5MmTjezsbOf7vXv3bqNTp05GampqqY/jmDHH8uXLjWuuucbluz8jI8Po16+f0blzZ+Pw4cOGYRjGsWPHjI8++shYvHixsXbtWufFl8LfqD5qbPtjUFCQUlNTlZSUJCm/qbZjx46aPHmygoOD9cYbb+j06dMy8pM2NWjQQI888ohsNhszoXiQv7+/evToob/85S8aOnSoXnrpJS1fvlyPPvqocnJySpS3WCwKDQ3VuHHjiI0HFfax7tSpk3NbcHCw6tatqyNHjkgq2fedY8ZzjILZgLp06aJjx44pNTXVeV/Lli11++23y8/PT9u3b5f0e9/3Bg0aOLuj0jWo8tlsNv3hD3/QhAkTVLt2bXXv3l3r16/X66+/rjlz5jgX2pPkMm4hPDxcFotFhmHQLchDgoOD1aNHD3Xs2FEBAQHO//+mTZsqKytLp0+fLnWMCMeMOVJSUvTbb78pICBAkpSTk6OQkBC9++67qlWrlv72t79Jyp/psXfv3powYYKGDRsmPz8/2e1252xpqD5q7CdfbGysjh07pm3btkmSM/Fo3769HnjgAW3cuFFffvmlLBZLiQ8hm81mRpVrhPr16+vmm2/WH//4R0nStdde60xKZs2apdzcXElSWlqavv766xKPJzae0bFjRy1cuFDt2rWTJGdyGBYWpsDAQEm/968+d+5ciccTl8plsVgU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HT161CV2PXv21MCBA3Xo0CFNnTpVu3fvrspqwmwmt9BUqq1btxp79uxx3h46dKgRGxtr7Nixo0Qz7fz582m6rULExjsRF/Pt2bPHSExMNAzDMBYvXmxMnTrVOHr0qEuZt956y2jZsqVx1113Gfv27XNut9vtVVrXmoS4eC9iUz299957zr9fe+01o2PHjsbatWtdugNv2rTJuPXWW41x48YZt99+u3HmzBkzqgoT+ExCUtG+o5xgeR6x8U7ExXxHjx41rr76auPmm282fvvtN2PVqlVG8+bNjb///e8lTrCefPJJIzo62rj99tuNb775xrmdeFQ+4uK9iE319PXXXxsRERHGpEmTnNvuuusu4/LLLzdefPFF49tvvzVOnDhh3HzzzcY///lPY+XKlUbTpk2diSd8X7VttzQqqe8oMzZVPmLjnYiL92nWrJlGjRqljIwMzZgxQ4MHD9b8+fO1evVqLV++XD/99JOzbFhYmNq1a6fg4GC1atXKuZ14VD7i4r2ITfV06aWXavHixXrrrbd03333SZL+85//6M9//rOWL1+u/v376y9/+YuOHDmiqVOnqlu3boqMjGS8T01ickJ00VJTU11uv/3220a3bt2Mv/3tby7NtL169TJGjBhR1dWr0YiNdyIu3sHhcDj/fvXVV40BAwYYd9xxh5GWlmasW7fOaN26tTFr1izjiy++MHJycoxbb73V2LBhg/NxdD3xDOLivYhN9ZaZmWmsXbvWaNiwoUtLyZdffmls3rzZ2LJli7P16sEHHzSuvPJK49SpU2ZVF1Ws2i2M+Pnnn+uSSy5Ry5YttWTJEv3www/629/+pmbNmjnLbNiwQVOnTlW/fv00YcIEdezYURKrFnsasfFOxMV7GUUW+1q9erVeeeUVNWrUSM8++6w+/PBD/fOf/9TJkycVGhoqPz8/ffzxx/Lz82ORMA8jLt6L2FQfCxcu1KlTpzRr1izntqysLL399tu65557NGbMGD355JMuj/n000/16quv6t1339WGDRvUvn37qq42TFKtVgH66aef9NBDD6levXp65plnFBYWpjfffFO1a9fW7bff7jzB+utf/6pDhw5pyZIlys7O1rRp09S6dWtZrVZW+fYQYuOdiIt3K1xU0mKx6JZbbpEkvfLKK7r33nu1YMECtWvXTl999ZXS09N16623ys/Pj3hUAeLivYhN9ZCZmalz585p6dKlqlWrliZPnixJCgoK0qBBg7Rz5049//zzSk9P16JFi5yP8/Pz08mTJ/XOO++oTZs2ZlUfJqhWCUlh39E333xTM2bM0HPPPaeQkBDNmDFDDodDY8aMcZ5g0Xe0ahEb70RcvF/xEyzDMLRq1So98MADevTRR3XjjTc67+fEquoQF+9FbLxPYWt64e/g4GD93//9n0JCQjRv3jwZhqEpU6ZIkoKDg9W8eXNdffXVSkpKcmmJj4uL00svvaSgoCAzXw7MUKUdxC4CfUe9F7HxTsSleikar1WrVhnXXnutMW7cOOPYsWMm1grExXsRG++wbt064+677zYSExNdpvA1DMNISUkxnn32WSM6OtqYN2+eYRiGkZ6ebtxxxx3GqlWrnOX4vkG1GkNi0HfUaxEb70Rcqpei7/uqVav08ssv67bbbtOoUaOIiYmIi/ciNuZKS0tTnz59lJ6ersjISF1xxRXq3r27RowY4SyTnJys9evXa9asWYqOjpbFYpG/v7927tzJ9w2cqlVCIpV9grVgwQKdPHmSvqMmIjbeibhUL0XjNXz4cPn5+enVV181uVYgLt6L2JjHbrdrzpw5atq0qbp06aL4+Hj961//Uv/+/dW6dWtNmjRJ/v7+kqT//ve/2rx5s+rUqaM777yT7xu4qHYJieT64fPqq69q1apVatiwoR599FFFR0fTd9RExMY7EZfqpTAeU6ZM0enTp7VkyRIFBASYXa0aj7h4L2Jjnvfee0//93//py1btqhdu3bKysrSggULNH/+fLVr105Dhw7Vn/70J3Xo0MHlcXl5efLzq1ZDmeFB1XI+z8IBbZI0cuRIjRo1SklJSZo7d65++eUX54kXJ1ZVj9h4J+JSvVgsFp08eVIHDx7U5MmTObHyEsTFexEb8/Tv31/Dhg3TihUrJOXPpPXOO+/o2muvVe/evRUfH68+ffpo1apVLo8jGUFR1bKFpBB9R70XsfFOxKV6ycrKYrYZL0RcvBexMcfKlSv16quvas2aNRo8eLCCg4P1+uuvKywsTL/++qs+++wzDRo0iCQEZarWCYlE31FvRmy8E3EBAFS2fv366auvvlKPHj20cuVKRURElChDNy2UpVp22SqqaFeUpk2bKigoSDk5OSbXChKx8VbEBQBQWQq/T8aNG6fWrVvriSeeUEREhEq73k0ygrJU+4REou+oNyM23om4AAAqQ2GLe69evXT69Gnt2LHDZTvgjmrfZaso+o56L2LjnYgLAKCyPP/883rqqae0efNmtW7d2uzqoBrxqbYzTqy8F7HxTsQFAFBZ+vfvr6+++kqtWrUyuyqoZnyqhQQAAADmYV0rVAQJCQAAAADT+MSgdgAAAADVEwkJAAAAANOQkAAAAAAwDQkJAAAAANOQkAAAAAAwDQkJAAAAANOQkAAAAAAwDQkJAAAAANOQkAAAAAAwzf8DUAgQ+GatAdsAAAAASUVORK5CYII=\n"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/plain": "<Figure size 958.333x575 with 4 Axes>",
-      "image/png": "\n"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "start = (datetime.date.today() - datetime.timedelta( NUM_DAYS ) )\n",
-    "end = datetime.datetime.today()\n",
-    "\n",
-    "data = yf.download(symbol, start=start, end=end, interval=INTERVAL)\n",
-    "data1 = yf.download(symbol1, start=start, end=end, interval=INTERVAL)\n",
-    "data2 = yf.download(symbol2, start=start, end=end, interval=INTERVAL)\n",
-    "\n",
-    "mpf.plot(data.iloc[-60:],type=\"candle\",volume=True,tight_layout=False,style=\"yahoo\",\n",
-    "        show_nontrading=True,scale_width_adjustment=dict(ohlc=1,lines=1,volume=2.4),\n",
-    "        title=\"Eth Price\",figratio=(20,12),ylabel='Price',\n",
-    "        ylabel_lower='Value')\n",
-    "\n",
-    "mpf.plot(data1.iloc[-60:],type=\"candle\",volume=True,tight_layout=False,style=\"yahoo\",\n",
-    "        show_nontrading=True,scale_width_adjustment=dict(ohlc=1,lines=1,volume=2.4),\n",
-    "        title=\"Btc Price\",figratio=(20,12),ylabel='Price',\n",
-    "        ylabel_lower='Value')\n",
-    "\n",
-    "mpf.plot(data2.iloc[-60:],type=\"candle\",volume=True,tight_layout=False,style=\"yahoo\",\n",
-    "        show_nontrading=True,scale_width_adjustment=dict(ohlc=1,lines=1,volume=2.4),\n",
-    "        title=\"Doge Price\",figratio=(20,12),ylabel='Price',\n",
-    "        ylabel_lower='Value')"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 179,
-   "outputs": [],
-   "source": [
-    "data.rename(columns={\"Close\": 'close', \"High\": 'high', \"Low\": 'low', 'Volume': 'volume', 'Open': 'open'}, inplace=True)\n",
-    "data1.rename(columns={\"Close\": 'close', \"High\": 'high', \"Low\": 'low', 'Volume': 'volume', 'Open': 'open'}, inplace=True)\n",
-    "data2.rename(columns={\"Close\": 'close', \"High\": 'high', \"Low\": 'low', 'Volume': 'volume', 'Open': 'open'}, inplace=True)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 180,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "<AxesSubplot:xlabel='Date'>"
-     },
-     "execution_count": 180,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "text/plain": "<Figure size 640x480 with 1 Axes>",
-      "image/png": "\n"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "\n",
-    "def _exponential_smooth(data, alpha):\n",
-    "    \"\"\"\n",
-    "    Function that exponentially smooths dataset so values are less 'rigid'\n",
-    "    :param alpha: weight factor to weight recent values more\n",
-    "    \"\"\"\n",
-    "\n",
-    "    return data.ewm(alpha=alpha).mean()\n",
-    "\n",
-    "data = _exponential_smooth(data, 0.65)\n",
-    "\n",
-    "tmp1 = data.iloc[-60:]\n",
-    "tmp1['close'].plot()"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 181,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "<AxesSubplot:xlabel='Date'>"
-     },
-     "execution_count": 181,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "text/plain": "<Figure size 640x480 with 1 Axes>",
-      "image/png": "\n"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "\n",
-    "def _exponential_smooth(data1, alpha):\n",
-    "    \"\"\"\n",
-    "    Function that exponentially smooths dataset so values are less 'rigid'\n",
-    "    :param alpha: weight factor to weight recent values more\n",
-    "    \"\"\"\n",
-    "\n",
-    "    return data1.ewm(alpha=alpha).mean()\n",
-    "\n",
-    "data1 = _exponential_smooth(data1, 0.65)\n",
-    "\n",
-    "tmp1 = data1.iloc[-60:]\n",
-    "tmp1['close'].plot()"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 182,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "<AxesSubplot:xlabel='Date'>"
-     },
-     "execution_count": 182,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "text/plain": "<Figure size 640x480 with 1 Axes>",
-      "image/png": "\n"
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "\n",
-    "def _exponential_smooth(data2, alpha):\n",
-    "    \"\"\"\n",
-    "    Function that exponentially smooths dataset so values are less 'rigid'\n",
-    "    :param alpha: weight factor to weight recent values more\n",
-    "    \"\"\"\n",
-    "\n",
-    "    return data2.ewm(alpha=alpha).mean()\n",
-    "\n",
-    "data2 = _exponential_smooth(data2, 0.65)\n",
-    "\n",
-    "tmp1 = data2.iloc[-60:]\n",
-    "tmp1['close'].plot()"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 183,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Index(['open', 'high', 'low', 'close', 'Adj Close', 'volume', 'MOM', 'ROC',\n",
-      "       'OBV', '20 period CCI', '14 period EMV', 'VIm', 'VIp', 'normVol'],\n",
-      "      dtype='object')\n"
-     ]
-    }
-   ],
-   "source": [
-    "def _get_indicator_data(data):\n",
-    "    \"\"\"\n",
-    "    Function that uses the finta API to calculate technical indicators used as the features\n",
-    "    :return:\n",
-    "    \"\"\"\n",
-    "\n",
-    "    for indicator in INDICATORS:\n",
-    "        ind_data = eval('TA.' + indicator + '(data)')\n",
-    "        if not isinstance(ind_data, pd.DataFrame):\n",
-    "            ind_data = ind_data.to_frame()\n",
-    "        data = data.merge(ind_data, left_index=True, right_index=True)\n",
-    "    data.rename(columns={\"14 period EMV.\": '14 period EMV'}, inplace=True)\n",
-    "\n",
-    "    # Also calculate moving averages for features\n",
-    "    data['ema50'] = data['close'] / data['close'].ewm(50).mean()\n",
-    "    data['ema21'] = data['close'] / data['close'].ewm(21).mean()\n",
-    "    data['ema15'] = data['close'] / data['close'].ewm(14).mean()\n",
-    "    data['ema5'] = data['close'] / data['close'].ewm(5).mean()\n",
-    "\n",
-    "    # Instead of using the actual volume value (which changes over time), we normalize it with a moving volume average\n",
-    "    data['normVol'] = data['volume'] / data['volume'].ewm(5).mean()\n",
-    "\n",
-    "    # Remove columns that won't be used as features\n",
-    "    del (data['14 period RSI'])\n",
-    "    del (data['MACD'])\n",
-    "    del (data['SIGNAL'])\n",
-    "    del (data['14 period STOCH %K'])\n",
-    "    del (data['MFV'])\n",
-    "    del (data['14 period MFI'])\n",
-    "    del (data['14 period ATR'])\n",
-    "    del (data['ema21'])\n",
-    "    del (data['ema50'])\n",
-    "    del (data['ema15'])\n",
-    "    del (data['ema5'])\n",
-    "\n",
-    "    return data\n",
-    "\n",
-    "data = _get_indicator_data(data)\n",
-    "print(data.columns)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 184,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Index(['open', 'high', 'low', 'close', 'Adj Close', 'volume', 'MOM', 'ROC',\n",
-      "       'OBV', '20 period CCI', '14 period EMV', 'VIm', 'VIp', 'normVol'],\n",
-      "      dtype='object')\n"
-     ]
-    }
-   ],
-   "source": [
-    "def _get_indicator_data(data1):\n",
-    "    \"\"\"\n",
-    "    Function that uses the finta API to calculate technical indicators used as the features\n",
-    "    :return:\n",
-    "    \"\"\"\n",
-    "\n",
-    "    for indicator in INDICATORS:\n",
-    "        ind_data = eval('TA.' + indicator + '(data1)')\n",
-    "        if not isinstance(ind_data, pd.DataFrame):\n",
-    "            ind_data = ind_data.to_frame()\n",
-    "        data1 = data1.merge(ind_data, left_index=True, right_index=True)\n",
-    "    data1.rename(columns={\"14 period EMV.\": '14 period EMV'}, inplace=True)\n",
-    "\n",
-    "    # Also calculate moving averages for features\n",
-    "    data1['ema50'] = data1['close'] / data1['close'].ewm(50).mean()\n",
-    "    data1['ema21'] = data1['close'] / data1['close'].ewm(21).mean()\n",
-    "    data1['ema15'] = data1['close'] / data1['close'].ewm(14).mean()\n",
-    "    data1['ema5'] = data1['close'] / data1['close'].ewm(5).mean()\n",
-    "\n",
-    "    # Instead of using the actual volume value (which changes over time), we normalize it with a moving volume average\n",
-    "    data1['normVol'] = data1['volume'] / data1['volume'].ewm(5).mean()\n",
-    "\n",
-    "    # Remove columns that won't be used as features\n",
-    "    del (data1['14 period RSI'])\n",
-    "    del (data1['MACD'])\n",
-    "    del (data1['SIGNAL'])\n",
-    "    del (data1['14 period STOCH %K'])\n",
-    "    del (data1['MFV'])\n",
-    "    del (data1['14 period MFI'])\n",
-    "    del (data1['14 period ATR'])\n",
-    "    del (data1['ema21'])\n",
-    "    del (data1['ema50'])\n",
-    "    del (data1['ema15'])\n",
-    "    del (data1['ema5'])\n",
-    "\n",
-    "    return data1\n",
-    "\n",
-    "data1 = _get_indicator_data(data1)\n",
-    "print(data1.columns)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 185,
-   "outputs": [],
-   "source": [
-    "live_pred_data = data.iloc[-16:-11]\n",
-    "live_pred_data1 = data1.iloc[-16:-11]"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 186,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "                   open         high          low    Adj Close        volume  \\\nDate                                                                           \n2022-07-26  1240.754266  1251.187339  1165.865161  1213.018779  1.547511e+10   \n2022-07-27  1213.981364  1312.399004  1176.207128  1299.032867  1.771254e+10   \n2022-07-28  1299.369374  1406.132413  1271.501413  1376.011668  2.074017e+10   \n2022-07-29  1376.212600  1431.668818  1336.799866  1403.833399  1.967154e+10   \n2022-07-30  1403.719564  1428.977812  1363.789584  1396.787167  1.520129e+10   \n\n                   MOM        ROC           OBV  20 period CCI  14 period EMV  \\\nDate                                                                            \n2022-07-26  114.943513  24.067500  1.099331e+12      44.550323       0.130826   \n2022-07-27  182.915227  27.567176  1.117043e+12      63.252322       0.155644   \n2022-07-28  126.584972  25.311234  1.137783e+12      95.831875       0.181502   \n2022-07-29  131.039909  25.778265  1.157455e+12     104.543100       0.172744   \n2022-07-30  125.653293  11.794247  1.142254e+12     100.171338       0.144725   \n\n                 VIm       VIp   normVol  pred  \nDate                                            \n2022-07-26  0.779961  1.193583  0.982823   1.0  \n2022-07-27  0.745126  1.208418  1.101979   1.0  \n2022-07-28  0.723006  1.249095  1.230784   0.0  \n2022-07-29  0.744815  1.246334  1.135688   0.0  \n2022-07-30  0.787824  1.255863  0.895884   0.0  ",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>Adj Close</th>\n      <th>volume</th>\n      <th>MOM</th>\n      <th>ROC</th>\n      <th>OBV</th>\n      <th>20 period CCI</th>\n      <th>14 period EMV</th>\n      <th>VIm</th>\n      <th>VIp</th>\n      <th>normVol</th>\n      <th>pred</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2022-07-26</th>\n      <td>1240.754266</td>\n      <td>1251.187339</td>\n      <td>1165.865161</td>\n      <td>1213.018779</td>\n      <td>1.547511e+10</td>\n      <td>114.943513</td>\n      <td>24.067500</td>\n      <td>1.099331e+12</td>\n      <td>44.550323</td>\n      <td>0.130826</td>\n      <td>0.779961</td>\n      <td>1.193583</td>\n      <td>0.982823</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2022-07-27</th>\n      <td>1213.981364</td>\n      <td>1312.399004</td>\n      <td>1176.207128</td>\n      <td>1299.032867</td>\n      <td>1.771254e+10</td>\n      <td>182.915227</td>\n      <td>27.567176</td>\n      <td>1.117043e+12</td>\n      <td>63.252322</td>\n      <td>0.155644</td>\n      <td>0.745126</td>\n      <td>1.208418</td>\n      <td>1.101979</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2022-07-28</th>\n      <td>1299.369374</td>\n      <td>1406.132413</td>\n      <td>1271.501413</td>\n      <td>1376.011668</td>\n      <td>2.074017e+10</td>\n      <td>126.584972</td>\n      <td>25.311234</td>\n      <td>1.137783e+12</td>\n      <td>95.831875</td>\n      <td>0.181502</td>\n      <td>0.723006</td>\n      <td>1.249095</td>\n      <td>1.230784</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2022-07-29</th>\n      <td>1376.212600</td>\n      <td>1431.668818</td>\n      <td>1336.799866</td>\n      <td>1403.833399</td>\n      <td>1.967154e+10</td>\n      <td>131.039909</td>\n      <td>25.778265</td>\n      <td>1.157455e+12</td>\n      <td>104.543100</td>\n      <td>0.172744</td>\n      <td>0.744815</td>\n      <td>1.246334</td>\n      <td>1.135688</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2022-07-30</th>\n      <td>1403.719564</td>\n      <td>1428.977812</td>\n      <td>1363.789584</td>\n      <td>1396.787167</td>\n      <td>1.520129e+10</td>\n      <td>125.653293</td>\n      <td>11.794247</td>\n      <td>1.142254e+12</td>\n      <td>100.171338</td>\n      <td>0.144725</td>\n      <td>0.787824</td>\n      <td>1.255863</td>\n      <td>0.895884</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-     },
-     "execution_count": 186,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "def _produce_prediction(data, window):\n",
-    "    \"\"\"\n",
-    "    Function that produces the 'truth' values\n",
-    "    At a given row, it looks 'window' rows ahead to see if the price increased (1) or decreased (0)\n",
-    "    :param window: number of days, or rows to look ahead to see what the price did\n",
-    "    \"\"\"\n",
-    "\n",
-    "    prediction = (data.shift(-window)['close'] >= data['close'])\n",
-    "    prediction = prediction.iloc[:-window]\n",
-    "    data['pred'] = prediction.astype(int)\n",
-    "\n",
-    "    return data\n",
-    "\n",
-    "data = _produce_prediction(data, window=5)\n",
-    "del (data['close'])\n",
-    "data = data.dropna()\n",
-    "data.tail()"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 187,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "                    open          high           low     Adj Close  \\\nDate                                                                 \n2022-07-26  18116.968737  18171.760572  17532.364372  17812.258628   \n2022-07-27  17814.334078  18633.063271  17503.438663  18489.405754   \n2022-07-28  18491.785091  19392.637281  18299.778044  19203.238108   \n2022-07-29  19204.779274  19702.924318  19023.181886  19429.968885   \n2022-07-30  19426.336613  20014.850367  19247.293347  19430.083055   \n\n                  volume         MOM        ROC           OBV  20 period CCI  \\\nDate                                                                           \n2022-07-26  2.471416e+10   88.471184   3.595226  2.131167e+12     -15.142809   \n2022-07-27  2.562337e+10  926.645871   6.003121  2.156790e+12      17.409496   \n2022-07-28  3.044043e+10  824.584844   8.347260  2.187231e+12      82.655170   \n2022-07-29  2.981366e+10  332.472078  10.631638  2.217044e+12     107.603412   \n2022-07-30  2.546257e+10  128.268352   5.720929  2.242507e+12     109.130227   \n\n            14 period EMV       VIm       VIp   normVol  pred  \nDate                                                           \n2022-07-26       3.031967  0.918988  1.080958  0.952296   1.0  \n2022-07-27       4.189237  0.879084  1.101580  0.989419   1.0  \n2022-07-28       5.367022  0.849139  1.133526  1.142034   0.0  \n2022-07-29       5.468000  0.845602  1.154335  1.096853   0.0  \n2022-07-30       5.407738  0.844282  1.156787  0.946752   0.0  ",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>Adj Close</th>\n      <th>volume</th>\n      <th>MOM</th>\n      <th>ROC</th>\n      <th>OBV</th>\n      <th>20 period CCI</th>\n      <th>14 period EMV</th>\n      <th>VIm</th>\n      <th>VIp</th>\n      <th>normVol</th>\n      <th>pred</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2022-07-26</th>\n      <td>18116.968737</td>\n      <td>18171.760572</td>\n      <td>17532.364372</td>\n      <td>17812.258628</td>\n      <td>2.471416e+10</td>\n      <td>88.471184</td>\n      <td>3.595226</td>\n      <td>2.131167e+12</td>\n      <td>-15.142809</td>\n      <td>3.031967</td>\n      <td>0.918988</td>\n      <td>1.080958</td>\n      <td>0.952296</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2022-07-27</th>\n      <td>17814.334078</td>\n      <td>18633.063271</td>\n      <td>17503.438663</td>\n      <td>18489.405754</td>\n      <td>2.562337e+10</td>\n      <td>926.645871</td>\n      <td>6.003121</td>\n      <td>2.156790e+12</td>\n      <td>17.409496</td>\n      <td>4.189237</td>\n      <td>0.879084</td>\n      <td>1.101580</td>\n      <td>0.989419</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2022-07-28</th>\n      <td>18491.785091</td>\n      <td>19392.637281</td>\n      <td>18299.778044</td>\n      <td>19203.238108</td>\n      <td>3.044043e+10</td>\n      <td>824.584844</td>\n      <td>8.347260</td>\n      <td>2.187231e+12</td>\n      <td>82.655170</td>\n      <td>5.367022</td>\n      <td>0.849139</td>\n      <td>1.133526</td>\n      <td>1.142034</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2022-07-29</th>\n      <td>19204.779274</td>\n      <td>19702.924318</td>\n      <td>19023.181886</td>\n      <td>19429.968885</td>\n      <td>2.981366e+10</td>\n      <td>332.472078</td>\n      <td>10.631638</td>\n      <td>2.217044e+12</td>\n      <td>107.603412</td>\n      <td>5.468000</td>\n      <td>0.845602</td>\n      <td>1.154335</td>\n      <td>1.096853</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2022-07-30</th>\n      <td>19426.336613</td>\n      <td>20014.850367</td>\n      <td>19247.293347</td>\n      <td>19430.083055</td>\n      <td>2.546257e+10</td>\n      <td>128.268352</td>\n      <td>5.720929</td>\n      <td>2.242507e+12</td>\n      <td>109.130227</td>\n      <td>5.407738</td>\n      <td>0.844282</td>\n      <td>1.156787</td>\n      <td>0.946752</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-     },
-     "execution_count": 187,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "def _produce_prediction(data1, window):\n",
-    "    \"\"\"\n",
-    "    Function that produces the 'truth' values\n",
-    "    At a given row, it looks 'window' rows ahead to see if the price increased (1) or decreased (0)\n",
-    "    :param window: number of days, or rows to look ahead to see what the price did\n",
-    "    \"\"\"\n",
-    "\n",
-    "    prediction = (data1.shift(-window)['close'] >= data1['close'])\n",
-    "    prediction = prediction.iloc[:-window]\n",
-    "    data1['pred'] = prediction.astype(int)\n",
-    "\n",
-    "    return data1\n",
-    "\n",
-    "data1 = _produce_prediction(data1, window=5)\n",
-    "del (data1['close'])\n",
-    "data1 = data1.dropna()\n",
-    "data1.tail()"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 188,
-   "outputs": [],
-   "source": [
-    "X=data.drop(\"pred\",axis=1)\n",
-    "y=data[\"pred\"]\n",
-    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 189,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "{'n_estimators': 110}\n",
-      "              precision    recall  f1-score   support\n",
-      "\n",
-      "         0.0       0.73      0.72      0.73       275\n",
-      "         1.0       0.74      0.74      0.74       289\n",
-      "\n",
-      "    accuracy                           0.73       564\n",
-      "   macro avg       0.73      0.73      0.73       564\n",
-      "weighted avg       0.73      0.73      0.73       564\n",
-      "\n",
-      "[[199  76]\n",
-      " [ 74 215]]\n"
-     ]
-    }
-   ],
-   "source": [
-    "def _train_random_forest(X_train, y_train, X_test, y_test):\n",
-    "\n",
-    "    \"\"\"\n",
-    "    Function that uses random forest classifier to train the model\n",
-    "    :return:\n",
-    "    \"\"\"\n",
-    "\n",
-    "    # Create a new random forest classifier\n",
-    "    rf = RandomForestClassifier()\n",
-    "\n",
-    "    # Dictionary of all values we want to test for n_estimators\n",
-    "    params_rf = {'n_estimators': [110,130,140,150,160,180,200]}\n",
-    "\n",
-    "    # Use gridsearch to test all values for n_estimators\n",
-    "    rf_gs = GridSearchCV(rf, params_rf, cv=5)\n",
-    "\n",
-    "    # Fit model to training data\n",
-    "    rf_gs.fit(X_train, y_train)\n",
-    "\n",
-    "    # Save best model\n",
-    "    rf_best = rf_gs.best_estimator_\n",
-    "\n",
-    "    # Check best n_estimators value\n",
-    "    print(rf_gs.best_params_)\n",
-    "\n",
-    "    prediction = rf_best.predict(X_test)\n",
-    "\n",
-    "    print(classification_report(y_test, prediction))\n",
-    "    print(confusion_matrix(y_test, prediction))\n",
-    "\n",
-    "    return rf_best\n",
-    "\n",
-    "rf_model = _train_random_forest(X_train, y_train, X_test, y_test)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 190,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "{'n_neighbors': 15}\n",
-      "              precision    recall  f1-score   support\n",
-      "\n",
-      "         0.0       0.58      0.53      0.55       275\n",
-      "         1.0       0.59      0.63      0.61       289\n",
-      "\n",
-      "    accuracy                           0.58       564\n",
-      "   macro avg       0.58      0.58      0.58       564\n",
-      "weighted avg       0.58      0.58      0.58       564\n",
-      "\n",
-      "[[146 129]\n",
-      " [107 182]]\n"
-     ]
-    }
-   ],
-   "source": [
-    "def _train_KNN(X_train, y_train, X_test, y_test):\n",
-    "\n",
-    "    knn = KNeighborsClassifier()\n",
-    "    # Create a dictionary of all values we want to test for n_neighbors\n",
-    "    params_knn = {'n_neighbors': np.arange(1, 25)}\n",
-    "\n",
-    "    # Use gridsearch to test all values for n_neighbors\n",
-    "    knn_gs = GridSearchCV(knn, params_knn, cv=5)\n",
-    "\n",
-    "    # Fit model to training data\n",
-    "    knn_gs.fit(X_train, y_train)\n",
-    "\n",
-    "    # Save best model\n",
-    "    knn_best = knn_gs.best_estimator_\n",
-    "\n",
-    "    # Check best n_neigbors value\n",
-    "    print(knn_gs.best_params_)\n",
-    "\n",
-    "    prediction = knn_best.predict(X_test)\n",
-    "\n",
-    "    print(classification_report(y_test, prediction))\n",
-    "    print(confusion_matrix(y_test, prediction))\n",
-    "\n",
-    "    return knn_best\n",
-    "\n",
-    "\n",
-    "knn_model = _train_KNN(X_train, y_train, X_test, y_test)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 191,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "{'n_estimators': 21}\n",
-      "              precision    recall  f1-score   support\n",
-      "\n",
-      "         0.0       0.57      0.44      0.49       275\n",
-      "         1.0       0.56      0.69      0.62       289\n",
-      "\n",
-      "    accuracy                           0.57       564\n",
-      "   macro avg       0.57      0.56      0.56       564\n",
-      "weighted avg       0.57      0.57      0.56       564\n",
-      "\n",
-      "[[120 155]\n",
-      " [ 90 199]]\n"
-     ]
-    }
-   ],
-   "source": [
-    "def _train_GBT(X_train, y_train, X_test, y_test):\n",
-    "\n",
-    "    gbt = GradientBoostingClassifier()\n",
-    "    # Create a dictionary of all values we want to test for n_neighbors\n",
-    "    params_gbt = {'n_estimators': np.arange(1, 25)}\n",
-    "\n",
-    "    # Use gridsearch to test all values for n_neighbors\n",
-    "    gbt_gs = GridSearchCV(gbt, params_gbt, cv=5)\n",
-    "\n",
-    "    # Fit model to training data\n",
-    "    gbt_gs.fit(X_train, y_train)\n",
-    "\n",
-    "    # Save best model\n",
-    "    gbt_best = gbt_gs.best_estimator_\n",
-    "\n",
-    "    # Check best n_neigbors value\n",
-    "    print(gbt_gs.best_params_)\n",
-    "\n",
-    "    prediction = gbt_best.predict(X_test)\n",
-    "\n",
-    "    print(classification_report(y_test, prediction))\n",
-    "    print(confusion_matrix(y_test, prediction))\n",
-    "\n",
-    "    return gbt_best\n",
-    "\n",
-    "\n",
-    "gbt_model = _train_GBT(X_train, y_train, X_test, y_test)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 192,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "0.6471631205673759\n",
-      "              precision    recall  f1-score   support\n",
-      "\n",
-      "         0.0       0.67      0.55      0.60       275\n",
-      "         1.0       0.63      0.74      0.68       289\n",
-      "\n",
-      "    accuracy                           0.65       564\n",
-      "   macro avg       0.65      0.64      0.64       564\n",
-      "weighted avg       0.65      0.65      0.64       564\n",
-      "\n",
-      "[[152 123]\n",
-      " [ 76 213]]\n"
-     ]
-    }
-   ],
-   "source": [
-    "def _ensemble_model(rf_model, knn_model, gbt_model, X_train, y_train, X_test, y_test):\n",
-    "\n",
-    "    # Create a dictionary of our models\n",
-    "    estimators=[('knn', knn_model), ('rf', rf_model), ('gbt', gbt_model)]\n",
-    "\n",
-    "    # Create our voting classifier, inputting our models\n",
-    "    ensemble = VotingClassifier(estimators, voting='hard')\n",
-    "\n",
-    "    #fit model to training data\n",
-    "    ensemble.fit(X_train, y_train)\n",
-    "\n",
-    "    #test our model on the test data\n",
-    "    print(ensemble.score(X_test, y_test))\n",
-    "\n",
-    "    prediction = ensemble.predict(X_test)\n",
-    "\n",
-    "    print(classification_report(y_test, prediction))\n",
-    "    print(confusion_matrix(y_test, prediction))\n",
-    "\n",
-    "    return ensemble\n",
-    "\n",
-    "ensemble_model = _ensemble_model(rf_model, knn_model, gbt_model, X_train, y_train, X_test, y_test)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 193,
-   "outputs": [
-    {
-     "data": {
-      "text/plain": "                   open         high          low        close    Adj Close  \\\nDate                                                                          \n2022-07-20  1272.741128  1334.300252  1236.523459  1271.133874  1271.133874   \n2022-07-21  1271.209889  1332.170323  1231.535298  1299.295116  1299.295116   \n2022-07-22  1299.319421  1358.114044  1256.085481  1287.202308  1287.202308   \n2022-07-23  1286.697607  1337.151048  1249.485247  1289.409126  1289.409126   \n2022-07-24  1289.191855  1364.414836  1275.869031  1318.727160  1318.727160   \n\n                  volume         MOM        ROC           OBV  20 period CCI  \\\nDate                                                                           \n2022-07-20  2.015283e+10  284.781222  25.362394  1.101389e+12     199.410388   \n2022-07-21  1.789613e+10  354.708093  28.329395  1.119286e+12     163.680007   \n2022-07-22  1.651144e+10  388.455273  30.501226  1.102774e+12     141.693518   \n2022-07-23  1.390032e+10  364.747325  36.505064  1.116674e+12     117.545898   \n2022-07-24  1.420276e+10  341.018430  46.729514  1.130877e+12     113.716336   \n\n            14 period EMV       VIm       VIp   normVol  \nDate                                                     \n2022-07-20       0.152979  0.677121  1.291758  1.244327  \n2022-07-21       0.138653  0.720703  1.244834  1.085986  \n2022-07-22       0.142796  0.727273  1.230094  1.001632  \n2022-07-23       0.136360  0.748712  1.203455  0.865856  \n2022-07-24       0.153865  0.728577  1.235291  0.902030  ",
-      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>Adj Close</th>\n      <th>volume</th>\n      <th>MOM</th>\n      <th>ROC</th>\n      <th>OBV</th>\n      <th>20 period CCI</th>\n      <th>14 period EMV</th>\n      <th>VIm</th>\n      <th>VIp</th>\n      <th>normVol</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2022-07-20</th>\n      <td>1272.741128</td>\n      <td>1334.300252</td>\n      <td>1236.523459</td>\n      <td>1271.133874</td>\n      <td>1271.133874</td>\n      <td>2.015283e+10</td>\n      <td>284.781222</td>\n      <td>25.362394</td>\n      <td>1.101389e+12</td>\n      <td>199.410388</td>\n      <td>0.152979</td>\n      <td>0.677121</td>\n      <td>1.291758</td>\n      <td>1.244327</td>\n    </tr>\n    <tr>\n      <th>2022-07-21</th>\n      <td>1271.209889</td>\n      <td>1332.170323</td>\n      <td>1231.535298</td>\n      <td>1299.295116</td>\n      <td>1299.295116</td>\n      <td>1.789613e+10</td>\n      <td>354.708093</td>\n      <td>28.329395</td>\n      <td>1.119286e+12</td>\n      <td>163.680007</td>\n      <td>0.138653</td>\n      <td>0.720703</td>\n      <td>1.244834</td>\n      <td>1.085986</td>\n    </tr>\n    <tr>\n      <th>2022-07-22</th>\n      <td>1299.319421</td>\n      <td>1358.114044</td>\n      <td>1256.085481</td>\n      <td>1287.202308</td>\n      <td>1287.202308</td>\n      <td>1.651144e+10</td>\n      <td>388.455273</td>\n      <td>30.501226</td>\n      <td>1.102774e+12</td>\n      <td>141.693518</td>\n      <td>0.142796</td>\n      <td>0.727273</td>\n      <td>1.230094</td>\n      <td>1.001632</td>\n    </tr>\n    <tr>\n      <th>2022-07-23</th>\n      <td>1286.697607</td>\n      <td>1337.151048</td>\n      <td>1249.485247</td>\n      <td>1289.409126</td>\n      <td>1289.409126</td>\n      <td>1.390032e+10</td>\n      <td>364.747325</td>\n      <td>36.505064</td>\n      <td>1.116674e+12</td>\n      <td>117.545898</td>\n      <td>0.136360</td>\n      <td>0.748712</td>\n      <td>1.203455</td>\n      <td>0.865856</td>\n    </tr>\n    <tr>\n      <th>2022-07-24</th>\n      <td>1289.191855</td>\n      <td>1364.414836</td>\n      <td>1275.869031</td>\n      <td>1318.727160</td>\n      <td>1318.727160</td>\n      <td>1.420276e+10</td>\n      <td>341.018430</td>\n      <td>46.729514</td>\n      <td>1.130877e+12</td>\n      <td>113.716336</td>\n      <td>0.153865</td>\n      <td>0.728577</td>\n      <td>1.235291</td>\n      <td>0.902030</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
-     },
-     "execution_count": 193,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "live_pred_data.head()"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 194,
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "[1. 1. 1. 1. 1.]\n"
-     ]
-    }
-   ],
-   "source": [
-    "del(live_pred_data['close'])\n",
-    "prediction = ensemble_model.predict(live_pred_data)\n",
-    "print(prediction)"
-   ],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 194,
-   "outputs": [],
-   "source": [],
-   "metadata": {
-    "collapsed": false,
-    "pycharm": {
-     "name": "#%%\n"
-    }
-   }
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 2
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython2",
-   "version": "2.7.6"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 0
-}
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	
+++ /dev/null	
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: .idea/dbnavigator.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DBNavigator.Project.DataEditorManager\">\r\n    <record-view-column-sorting-type value=\"BY_INDEX\" />\r\n    <value-preview-text-wrapping value=\"true\" />\r\n    <value-preview-pinned value=\"false\" />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.DataExportManager\">\r\n    <export-instructions>\r\n      <create-header value=\"true\" />\r\n      <friendly-headers value=\"false\" />\r\n      <quote-values-containing-separator value=\"true\" />\r\n      <quote-all-values value=\"false\" />\r\n      <value-separator value=\"\" />\r\n      <file-name value=\"\" />\r\n      <file-location value=\"\" />\r\n      <scope value=\"GLOBAL\" />\r\n      <destination value=\"FILE\" />\r\n      <format value=\"EXCEL\" />\r\n      <charset value=\"windows-1252\" />\r\n      <charset value=\"windows-1252\" />\r\n    </export-instructions>\r\n  </component>\r\n  <component name=\"DBNavigator.Project.DatabaseBrowserManager\">\r\n    <autoscroll-to-editor value=\"false\" />\r\n    <autoscroll-from-editor value=\"true\" />\r\n    <show-object-properties value=\"true\" />\r\n    <loaded-nodes />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.DatabaseFileManager\">\r\n    <open-files />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.EditorStateManager\">\r\n    <last-used-providers />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.ExecutionManager\">\r\n    <retain-sticky-names value=\"false\" />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.MethodExecutionManager\">\r\n    <method-browser />\r\n    <execution-history>\r\n      <group-entries value=\"true\" />\r\n      <execution-inputs />\r\n    </execution-history>\r\n    <argument-values-cache />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.ObjectDependencyManager\">\r\n    <last-used-dependency-type value=\"INCOMING\" />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.ObjectQuickFilterManager\">\r\n    <last-used-operator value=\"EQUAL\" />\r\n    <filters />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.ParserDiagnosticsManager\">\r\n    <diagnostics-history />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.ScriptExecutionManager\" clear-outputs=\"true\">\r\n    <recently-used-interfaces />\r\n  </component>\r\n  <component name=\"DBNavigator.Project.Settings\">\r\n    <connections />\r\n    <browser-settings>\r\n      <general>\r\n        <display-mode value=\"TABBED\" />\r\n        <navigation-history-size value=\"100\" />\r\n        <show-object-details value=\"false\" />\r\n      </general>\r\n      <filters>\r\n        <object-type-filter>\r\n          <object-type name=\"SCHEMA\" enabled=\"true\" />\r\n          <object-type name=\"USER\" enabled=\"true\" />\r\n          <object-type name=\"ROLE\" enabled=\"true\" />\r\n          <object-type name=\"PRIVILEGE\" enabled=\"true\" />\r\n          <object-type name=\"CHARSET\" enabled=\"true\" />\r\n          <object-type name=\"TABLE\" enabled=\"true\" />\r\n          <object-type name=\"VIEW\" enabled=\"true\" />\r\n          <object-type name=\"MATERIALIZED_VIEW\" enabled=\"true\" />\r\n          <object-type name=\"NESTED_TABLE\" enabled=\"true\" />\r\n          <object-type name=\"COLUMN\" enabled=\"true\" />\r\n          <object-type name=\"INDEX\" enabled=\"true\" />\r\n          <object-type name=\"CONSTRAINT\" enabled=\"true\" />\r\n          <object-type name=\"DATASET_TRIGGER\" enabled=\"true\" />\r\n          <object-type name=\"DATABASE_TRIGGER\" enabled=\"true\" />\r\n          <object-type name=\"SYNONYM\" enabled=\"true\" />\r\n          <object-type name=\"SEQUENCE\" enabled=\"true\" />\r\n          <object-type name=\"PROCEDURE\" enabled=\"true\" />\r\n          <object-type name=\"FUNCTION\" enabled=\"true\" />\r\n          <object-type name=\"PACKAGE\" enabled=\"true\" />\r\n          <object-type name=\"TYPE\" enabled=\"true\" />\r\n          <object-type name=\"TYPE_ATTRIBUTE\" enabled=\"true\" />\r\n          <object-type name=\"ARGUMENT\" enabled=\"true\" />\r\n          <object-type name=\"DIMENSION\" enabled=\"true\" />\r\n          <object-type name=\"CLUSTER\" enabled=\"true\" />\r\n          <object-type name=\"DBLINK\" enabled=\"true\" />\r\n        </object-type-filter>\r\n      </filters>\r\n      <sorting>\r\n        <object-type name=\"COLUMN\" sorting-type=\"NAME\" />\r\n        <object-type name=\"FUNCTION\" sorting-type=\"NAME\" />\r\n        <object-type name=\"PROCEDURE\" sorting-type=\"NAME\" />\r\n        <object-type name=\"ARGUMENT\" sorting-type=\"POSITION\" />\r\n      </sorting>\r\n      <default-editors>\r\n        <object-type name=\"VIEW\" editor-type=\"SELECTION\" />\r\n        <object-type name=\"PACKAGE\" editor-type=\"SELECTION\" />\r\n        <object-type name=\"TYPE\" editor-type=\"SELECTION\" />\r\n      </default-editors>\r\n    </browser-settings>\r\n    <navigation-settings>\r\n      <lookup-filters>\r\n        <lookup-objects>\r\n          <object-type name=\"SCHEMA\" enabled=\"true\" />\r\n          <object-type name=\"USER\" enabled=\"false\" />\r\n          <object-type name=\"ROLE\" enabled=\"false\" />\r\n          <object-type name=\"PRIVILEGE\" enabled=\"false\" />\r\n          <object-type name=\"CHARSET\" enabled=\"false\" />\r\n          <object-type name=\"TABLE\" enabled=\"true\" />\r\n          <object-type name=\"VIEW\" enabled=\"true\" />\r\n          <object-type name=\"MATERIALIZED VIEW\" enabled=\"true\" />\r\n          <object-type name=\"INDEX\" enabled=\"true\" />\r\n          <object-type name=\"CONSTRAINT\" enabled=\"true\" />\r\n          <object-type name=\"DATASET TRIGGER\" enabled=\"true\" />\r\n          <object-type name=\"DATABASE TRIGGER\" enabled=\"true\" />\r\n          <object-type name=\"SYNONYM\" enabled=\"false\" />\r\n          <object-type name=\"SEQUENCE\" enabled=\"true\" />\r\n          <object-type name=\"PROCEDURE\" enabled=\"true\" />\r\n          <object-type name=\"FUNCTION\" enabled=\"true\" />\r\n          <object-type name=\"PACKAGE\" enabled=\"true\" />\r\n          <object-type name=\"TYPE\" enabled=\"true\" />\r\n          <object-type name=\"DIMENSION\" enabled=\"false\" />\r\n          <object-type name=\"CLUSTER\" enabled=\"false\" />\r\n          <object-type name=\"DBLINK\" enabled=\"true\" />\r\n        </lookup-objects>\r\n        <force-database-load value=\"false\" />\r\n        <prompt-connection-selection value=\"true\" />\r\n        <prompt-schema-selection value=\"true\" />\r\n      </lookup-filters>\r\n    </navigation-settings>\r\n    <dataset-grid-settings>\r\n      <general>\r\n        <enable-zooming value=\"true\" />\r\n        <enable-column-tooltip value=\"true\" />\r\n      </general>\r\n      <sorting>\r\n        <nulls-first value=\"true\" />\r\n        <max-sorting-columns value=\"4\" />\r\n      </sorting>\r\n      <tracking-columns>\r\n        <columnNames value=\"\" />\r\n        <visible value=\"true\" />\r\n        <editable value=\"false\" />\r\n      </tracking-columns>\r\n    </dataset-grid-settings>\r\n    <dataset-editor-settings>\r\n      <text-editor-popup>\r\n        <active value=\"false\" />\r\n        <active-if-empty value=\"false\" />\r\n        <data-length-threshold value=\"100\" />\r\n        <popup-delay value=\"1000\" />\r\n      </text-editor-popup>\r\n      <values-actions-popup>\r\n        <show-popup-button value=\"true\" />\r\n        <element-count-threshold value=\"1000\" />\r\n        <data-length-threshold value=\"250\" />\r\n      </values-actions-popup>\r\n      <general>\r\n        <fetch-block-size value=\"100\" />\r\n        <fetch-timeout value=\"30\" />\r\n        <trim-whitespaces value=\"true\" />\r\n        <convert-empty-strings-to-null value=\"true\" />\r\n        <select-content-on-cell-edit value=\"true\" />\r\n        <large-value-preview-active value=\"true\" />\r\n      </general>\r\n      <filters>\r\n        <prompt-filter-dialog value=\"true\" />\r\n        <default-filter-type value=\"BASIC\" />\r\n      </filters>\r\n      <qualified-text-editor text-length-threshold=\"300\">\r\n        <content-types>\r\n          <content-type name=\"Text\" enabled=\"true\" />\r\n          <content-type name=\"Properties\" enabled=\"true\" />\r\n          <content-type name=\"XML\" enabled=\"true\" />\r\n          <content-type name=\"DTD\" enabled=\"true\" />\r\n          <content-type name=\"HTML\" enabled=\"true\" />\r\n          <content-type name=\"XHTML\" enabled=\"true\" />\r\n          <content-type name=\"CSS\" enabled=\"true\" />\r\n          <content-type name=\"SQL\" enabled=\"true\" />\r\n          <content-type name=\"PL/SQL\" enabled=\"true\" />\r\n          <content-type name=\"JavaScript\" enabled=\"true\" />\r\n          <content-type name=\"JSON\" enabled=\"true\" />\r\n          <content-type name=\"JSON5\" enabled=\"true\" />\r\n          <content-type name=\"YAML\" enabled=\"true\" />\r\n        </content-types>\r\n      </qualified-text-editor>\r\n      <record-navigation>\r\n        <navigation-target value=\"VIEWER\" />\r\n      </record-navigation>\r\n    </dataset-editor-settings>\r\n    <code-editor-settings>\r\n      <general>\r\n        <show-object-navigation-gutter value=\"false\" />\r\n        <show-spec-declaration-navigation-gutter value=\"true\" />\r\n        <enable-spellchecking value=\"true\" />\r\n        <enable-reference-spellchecking value=\"false\" />\r\n      </general>\r\n      <confirmations>\r\n        <save-changes value=\"false\" />\r\n        <revert-changes value=\"true\" />\r\n      </confirmations>\r\n    </code-editor-settings>\r\n    <code-completion-settings>\r\n      <filters>\r\n        <basic-filter>\r\n          <filter-element type=\"RESERVED_WORD\" id=\"keyword\" selected=\"true\" />\r\n          <filter-element type=\"RESERVED_WORD\" id=\"function\" selected=\"true\" />\r\n          <filter-element type=\"RESERVED_WORD\" id=\"parameter\" selected=\"true\" />\r\n          <filter-element type=\"RESERVED_WORD\" id=\"datatype\" selected=\"true\" />\r\n          <filter-element type=\"RESERVED_WORD\" id=\"exception\" selected=\"true\" />\r\n          <filter-element type=\"OBJECT\" id=\"schema\" selected=\"true\" />\r\n          <filter-element type=\"OBJECT\" id=\"role\" selected=\"true\" />\r\n          <filter-element type=\"OBJECT\" id=\"user\" selected=\"true\" />\r\n          <filter-element type=\"OBJECT\" id=\"privilege\" selected=\"true\" />\r\n          <user-schema>\r\n            <filter-element type=\"OBJECT\" id=\"table\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"materialized view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"index\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"constraint\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"trigger\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"synonym\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"sequence\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"procedure\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"function\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"package\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"type\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dimension\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"cluster\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dblink\" selected=\"true\" />\r\n          </user-schema>\r\n          <public-schema>\r\n            <filter-element type=\"OBJECT\" id=\"table\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"view\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"materialized view\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"index\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"constraint\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"trigger\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"synonym\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"sequence\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"procedure\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"function\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"package\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"type\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"dimension\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"cluster\" selected=\"false\" />\r\n            <filter-element type=\"OBJECT\" id=\"dblink\" selected=\"false\" />\r\n          </public-schema>\r\n          <any-schema>\r\n            <filter-element type=\"OBJECT\" id=\"table\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"materialized view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"index\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"constraint\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"trigger\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"synonym\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"sequence\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"procedure\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"function\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"package\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"type\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dimension\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"cluster\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dblink\" selected=\"true\" />\r\n          </any-schema>\r\n        </basic-filter>\r\n        <extended-filter>\r\n          <filter-element type=\"RESERVED_WORD\" id=\"keyword\" selected=\"true\" />\r\n          <filter-element type=\"RESERVED_WORD\" id=\"function\" selected=\"true\" />\r\n          <filter-element type=\"RESERVED_WORD\" id=\"parameter\" selected=\"true\" />\r\n          <filter-element type=\"RESERVED_WORD\" id=\"datatype\" selected=\"true\" />\r\n          <filter-element type=\"RESERVED_WORD\" id=\"exception\" selected=\"true\" />\r\n          <filter-element type=\"OBJECT\" id=\"schema\" selected=\"true\" />\r\n          <filter-element type=\"OBJECT\" id=\"user\" selected=\"true\" />\r\n          <filter-element type=\"OBJECT\" id=\"role\" selected=\"true\" />\r\n          <filter-element type=\"OBJECT\" id=\"privilege\" selected=\"true\" />\r\n          <user-schema>\r\n            <filter-element type=\"OBJECT\" id=\"table\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"materialized view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"index\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"constraint\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"trigger\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"synonym\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"sequence\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"procedure\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"function\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"package\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"type\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dimension\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"cluster\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dblink\" selected=\"true\" />\r\n          </user-schema>\r\n          <public-schema>\r\n            <filter-element type=\"OBJECT\" id=\"table\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"materialized view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"index\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"constraint\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"trigger\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"synonym\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"sequence\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"procedure\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"function\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"package\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"type\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dimension\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"cluster\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dblink\" selected=\"true\" />\r\n          </public-schema>\r\n          <any-schema>\r\n            <filter-element type=\"OBJECT\" id=\"table\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"materialized view\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"index\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"constraint\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"trigger\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"synonym\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"sequence\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"procedure\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"function\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"package\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"type\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dimension\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"cluster\" selected=\"true\" />\r\n            <filter-element type=\"OBJECT\" id=\"dblink\" selected=\"true\" />\r\n          </any-schema>\r\n        </extended-filter>\r\n      </filters>\r\n      <sorting enabled=\"true\">\r\n        <sorting-element type=\"RESERVED_WORD\" id=\"keyword\" />\r\n        <sorting-element type=\"RESERVED_WORD\" id=\"datatype\" />\r\n        <sorting-element type=\"OBJECT\" id=\"column\" />\r\n        <sorting-element type=\"OBJECT\" id=\"table\" />\r\n        <sorting-element type=\"OBJECT\" id=\"view\" />\r\n        <sorting-element type=\"OBJECT\" id=\"materialized view\" />\r\n        <sorting-element type=\"OBJECT\" id=\"index\" />\r\n        <sorting-element type=\"OBJECT\" id=\"constraint\" />\r\n        <sorting-element type=\"OBJECT\" id=\"trigger\" />\r\n        <sorting-element type=\"OBJECT\" id=\"synonym\" />\r\n        <sorting-element type=\"OBJECT\" id=\"sequence\" />\r\n        <sorting-element type=\"OBJECT\" id=\"procedure\" />\r\n        <sorting-element type=\"OBJECT\" id=\"function\" />\r\n        <sorting-element type=\"OBJECT\" id=\"package\" />\r\n        <sorting-element type=\"OBJECT\" id=\"type\" />\r\n        <sorting-element type=\"OBJECT\" id=\"dimension\" />\r\n        <sorting-element type=\"OBJECT\" id=\"cluster\" />\r\n        <sorting-element type=\"OBJECT\" id=\"dblink\" />\r\n        <sorting-element type=\"OBJECT\" id=\"schema\" />\r\n        <sorting-element type=\"OBJECT\" id=\"role\" />\r\n        <sorting-element type=\"OBJECT\" id=\"user\" />\r\n        <sorting-element type=\"RESERVED_WORD\" id=\"function\" />\r\n        <sorting-element type=\"RESERVED_WORD\" id=\"parameter\" />\r\n      </sorting>\r\n      <format>\r\n        <enforce-code-style-case value=\"true\" />\r\n      </format>\r\n    </code-completion-settings>\r\n    <execution-engine-settings>\r\n      <statement-execution>\r\n        <fetch-block-size value=\"100\" />\r\n        <execution-timeout value=\"20\" />\r\n        <debug-execution-timeout value=\"600\" />\r\n        <focus-result value=\"false\" />\r\n        <prompt-execution value=\"false\" />\r\n      </statement-execution>\r\n      <script-execution>\r\n        <command-line-interfaces />\r\n        <execution-timeout value=\"300\" />\r\n      </script-execution>\r\n      <method-execution>\r\n        <execution-timeout value=\"30\" />\r\n        <debug-execution-timeout value=\"600\" />\r\n        <parameter-history-size value=\"10\" />\r\n      </method-execution>\r\n    </execution-engine-settings>\r\n    <operation-settings>\r\n      <transactions>\r\n        <uncommitted-changes>\r\n          <on-project-close value=\"ASK\" />\r\n          <on-disconnect value=\"ASK\" />\r\n          <on-autocommit-toggle value=\"ASK\" />\r\n        </uncommitted-changes>\r\n        <multiple-uncommitted-changes>\r\n          <on-commit value=\"ASK\" />\r\n          <on-rollback value=\"ASK\" />\r\n        </multiple-uncommitted-changes>\r\n      </transactions>\r\n      <session-browser>\r\n        <disconnect-session value=\"ASK\" />\r\n        <kill-session value=\"ASK\" />\r\n        <reload-on-filter-change value=\"false\" />\r\n      </session-browser>\r\n      <compiler>\r\n        <compile-type value=\"KEEP\" />\r\n        <compile-dependencies value=\"ASK\" />\r\n        <always-show-controls value=\"false\" />\r\n      </compiler>\r\n      <debugger>\r\n        <debugger-type value=\"JDBC\" />\r\n        <use-generic-runners value=\"true\" />\r\n      </debugger>\r\n    </operation-settings>\r\n    <ddl-file-settings>\r\n      <extensions>\r\n        <mapping file-type-id=\"VIEW\" extensions=\"vw\" />\r\n        <mapping file-type-id=\"TRIGGER\" extensions=\"trg\" />\r\n        <mapping file-type-id=\"PROCEDURE\" extensions=\"prc\" />\r\n        <mapping file-type-id=\"FUNCTION\" extensions=\"fnc\" />\r\n        <mapping file-type-id=\"PACKAGE\" extensions=\"pkg\" />\r\n        <mapping file-type-id=\"PACKAGE_SPEC\" extensions=\"pks\" />\r\n        <mapping file-type-id=\"PACKAGE_BODY\" extensions=\"pkb\" />\r\n        <mapping file-type-id=\"TYPE\" extensions=\"tpe\" />\r\n        <mapping file-type-id=\"TYPE_SPEC\" extensions=\"tps\" />\r\n        <mapping file-type-id=\"TYPE_BODY\" extensions=\"tpb\" />\r\n      </extensions>\r\n      <general>\r\n        <lookup-ddl-files value=\"true\" />\r\n        <create-ddl-files value=\"false\" />\r\n        <synchronize-ddl-files value=\"true\" />\r\n        <use-qualified-names value=\"false\" />\r\n        <make-scripts-rerunnable value=\"true\" />\r\n      </general>\r\n    </ddl-file-settings>\r\n    <general-settings>\r\n      <regional-settings>\r\n        <date-format value=\"MEDIUM\" />\r\n        <number-format value=\"UNGROUPED\" />\r\n        <locale value=\"SYSTEM_DEFAULT\" />\r\n        <use-custom-formats value=\"false\" />\r\n      </regional-settings>\r\n      <environment>\r\n        <environment-types>\r\n          <environment-type id=\"development\" name=\"Development\" description=\"Development environment\" color=\"-2430209/-12296320\" readonly-code=\"false\" readonly-data=\"false\" />\r\n          <environment-type id=\"integration\" name=\"Integration\" description=\"Integration environment\" color=\"-2621494/-12163514\" readonly-code=\"true\" readonly-data=\"false\" />\r\n          <environment-type id=\"production\" name=\"Production\" description=\"Productive environment\" color=\"-11574/-10271420\" readonly-code=\"true\" readonly-data=\"true\" />\r\n          <environment-type id=\"other\" name=\"Other\" description=\"\" color=\"-1576/-10724543\" readonly-code=\"false\" readonly-data=\"false\" />\r\n        </environment-types>\r\n        <visibility-settings>\r\n          <connection-tabs value=\"true\" />\r\n          <dialog-headers value=\"true\" />\r\n          <object-editor-tabs value=\"true\" />\r\n          <script-editor-tabs value=\"false\" />\r\n          <execution-result-tabs value=\"true\" />\r\n        </visibility-settings>\r\n      </environment>\r\n    </general-settings>\r\n  </component>\r\n  <component name=\"DBNavigator.Project.StatementExecutionManager\">\r\n    <execution-variables />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dbnavigator.xml b/.idea/dbnavigator.xml
--- a/.idea/dbnavigator.xml	
+++ b/.idea/dbnavigator.xml	
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="DBNavigator.Project.DataEditorManager">
     <record-view-column-sorting-type value="BY_INDEX" />
-    <value-preview-text-wrapping value="true" />
+    <value-preview-text-wrapping value="false" />
     <value-preview-pinned value="false" />
   </component>
   <component name="DBNavigator.Project.DataExportManager">
@@ -183,10 +183,8 @@
           <content-type name="DTD" enabled="true" />
           <content-type name="HTML" enabled="true" />
           <content-type name="XHTML" enabled="true" />
-          <content-type name="CSS" enabled="true" />
           <content-type name="SQL" enabled="true" />
           <content-type name="PL/SQL" enabled="true" />
-          <content-type name="JavaScript" enabled="true" />
           <content-type name="JSON" enabled="true" />
           <content-type name="JSON5" enabled="true" />
           <content-type name="YAML" enabled="true" />
Index: .idea/pythonProject1.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.10\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/pythonProject1.iml b/.idea/pythonProject1.iml
--- a/.idea/pythonProject1.iml	
+++ b/.idea/pythonProject1.iml	
@@ -1,8 +1,21 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
-    <content url="file://$MODULE_DIR$" />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
     <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
+  <component name="PackageRequirementsSettings">
+    <option name="removeUnused" value="true" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+    <option name="renderExternalDocumentation" value="true" />
+  </component>
+  <component name="TemplatesService">
+    <option name="TEMPLATE_CONFIGURATION" value="Jinja2" />
+  </component>
 </module>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\r\n  <profile version=\"1.0\">\r\n    <option name=\"myName\" value=\"Project Default\" />\r\n    <inspection_tool class=\"PyUnresolvedReferencesInspection\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\r\n      <option name=\"ignoredIdentifiers\">\r\n        <list>\r\n          <option value=\"main.imageai\" />\r\n        </list>\r\n      </option>\r\n    </inspection_tool>\r\n  </profile>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
--- a/.idea/inspectionProfiles/Project_Default.xml	
+++ b/.idea/inspectionProfiles/Project_Default.xml	
@@ -1,6 +1,23 @@
 <component name="InspectionProjectProfileManager">
   <profile version="1.0">
     <option name="myName" value="Project Default" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="9">
+            <item index="0" class="java.lang.String" itemvalue="jinja2" />
+            <item index="1" class="java.lang.String" itemvalue="chatterbot" />
+            <item index="2" class="java.lang.String" itemvalue="nltk" />
+            <item index="3" class="java.lang.String" itemvalue="flask" />
+            <item index="4" class="java.lang.String" itemvalue="itsdangerous" />
+            <item index="5" class="java.lang.String" itemvalue="gunicorn" />
+            <item index="6" class="java.lang.String" itemvalue="contract" />
+            <item index="7" class="java.lang.String" itemvalue="grpc" />
+            <item index="8" class="java.lang.String" itemvalue="pickle" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
     <inspection_tool class="PyUnresolvedReferencesInspection" enabled="true" level="WARNING" enabled_by_default="true">
       <option name="ignoredIdentifiers">
         <list>
@@ -8,5 +25,6 @@
         </list>
       </option>
     </inspection_tool>
+    <inspection_tool class="StandardJS" enabled="true" level="ERROR" enabled_by_default="true" />
   </profile>
 </component>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyPackaging\">\r\n    <option name=\"earlyReleasesAsUpgrades\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
-  <component name="PyPackaging">
-    <option name="earlyReleasesAsUpgrades" value="true" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
   </component>
 </project>
\ No newline at end of file
